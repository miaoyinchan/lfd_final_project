INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f20f788e670>)), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f20f788e670>), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7f20f788e670>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f72aa455670>)), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f72aa455670>), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7f72aa455670>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(analyzer='char_wb', max_features=5000, min_df=5,
                ngram_range=(5, 5))), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(analyzer='char_wb', max_features=5000, min_df=5,
                ngram_range=(5, 5)), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'char_wb', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (5, 5), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': None, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                stop_words=['i', 'me', 'my', 'myself', 'we', 'our', 'ours',
                            'ourselves', 'you', "you're", "you've", "you'll",
                            "you'd", 'your', 'yours', 'yourself', 'yourselves',
                            'he', 'him', 'his', 'himself', 'she', "she's",
                            'her', 'hers', 'herself', 'it', "it's", 'its',
                            'itself', ...],
                tokenizer=<function word_tokenize at 0x7f1c81957670>)), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                stop_words=['i', 'me', 'my', 'myself', 'we', 'our', 'ours',
                            'ourselves', 'you', "you're", "you've", "you'll",
                            "you'd", 'your', 'yours', 'yourself', 'yourselves',
                            'he', 'him', 'his', 'himself', 'she', "she's",
                            'her', 'hers', 'herself', 'it', "it's", 'its',
                            'itself', ...],
                tokenizer=<function word_tokenize at 0x7f1c81957670>), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', "you're", "you've", "you'll", "you'd", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', "she's", 'her', 'hers', 'herself', 'it', "it's", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', "that'll", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', "don't", 'should', "should've", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', "aren't", 'couldn', "couldn't", 'didn', "didn't", 'doesn', "doesn't", 'hadn', "hadn't", 'hasn', "hasn't", 'haven', "haven't", 'isn', "isn't", 'ma', 'mightn', "mightn't", 'mustn', "mustn't", 'needn', "needn't", 'shan', "shan't", 'shouldn', "shouldn't", 'wasn', "wasn't", 'weren', "weren't", 'won', "won't", 'wouldn', "wouldn't"], 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7f1c81957670>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function tokenizer_pos_tag at 0x7fe895224790>)), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function tokenizer_pos_tag at 0x7fe895224790>), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function tokenizer_pos_tag at 0x7fe895224790>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<__main__.LemmaTokenizer object at 0x7f9e07e2bfa0>)), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<__main__.LemmaTokenizer object at 0x7f9e07e2bfa0>), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <__main__.LemmaTokenizer object at 0x7f9e07e2bfa0>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function tokenizer_ner_tag at 0x7f521c5288b0>)), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function tokenizer_ner_tag at 0x7f521c5288b0>), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function tokenizer_ner_tag at 0x7f521c5288b0>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', CountVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7fded4643670>)), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': CountVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7fded4643670>), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.int64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__preprocessor': None, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7fded4643670>, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', CountVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f1b65759670>)), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': CountVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f1b65759670>), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.int64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__preprocessor': None, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7f1b65759670>, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', CountVectorizer(analyzer='char_wb', max_features=5000, min_df=5,
                ngram_range=(5, 5))), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': CountVectorizer(analyzer='char_wb', max_features=5000, min_df=5,
                ngram_range=(5, 5)), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'char_wb', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.int64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (5, 5), 'vec__preprocessor': None, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': None, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', CountVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                stop_words=['i', 'me', 'my', 'myself', 'we', 'our', 'ours',
                            'ourselves', 'you', "you're", "you've", "you'll",
                            "you'd", 'your', 'yours', 'yourself', 'yourselves',
                            'he', 'him', 'his', 'himself', 'she', "she's",
                            'her', 'hers', 'herself', 'it', "it's", 'its',
                            'itself', ...],
                tokenizer=<function word_tokenize at 0x7f2819c08670>)), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': CountVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                stop_words=['i', 'me', 'my', 'myself', 'we', 'our', 'ours',
                            'ourselves', 'you', "you're", "you've", "you'll",
                            "you'd", 'your', 'yours', 'yourself', 'yourselves',
                            'he', 'him', 'his', 'himself', 'she', "she's",
                            'her', 'hers', 'herself', 'it', "it's", 'its',
                            'itself', ...],
                tokenizer=<function word_tokenize at 0x7f2819c08670>), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.int64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__preprocessor': None, 'vec__stop_words': ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', "you're", "you've", "you'll", "you'd", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', "she's", 'her', 'hers', 'herself', 'it', "it's", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', "that'll", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', "don't", 'should', "should've", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', "aren't", 'couldn', "couldn't", 'didn', "didn't", 'doesn', "doesn't", 'hadn', "hadn't", 'hasn', "hasn't", 'haven', "haven't", 'isn', "isn't", 'ma', 'mightn', "mightn't", 'mustn', "mustn't", 'needn', "needn't", 'shan', "shan't", 'shouldn', "shouldn't", 'wasn', "wasn't", 'weren', "weren't", 'won', "won't", 'wouldn', "wouldn't"], 'vec__strip_accents': None, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7f2819c08670>, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', CountVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<__main__.LemmaTokenizer object at 0x7f48986ee040>)), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': CountVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<__main__.LemmaTokenizer object at 0x7f48986ee040>), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.int64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__preprocessor': None, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <__main__.LemmaTokenizer object at 0x7f48986ee040>, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', CountVectorizer(max_features=5000, min_df=10, ngram_range=(1, 4),
                tokenizer=<function word_tokenize at 0x7f3e45677790>)), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': CountVectorizer(max_features=5000, min_df=10, ngram_range=(1, 4),
                tokenizer=<function word_tokenize at 0x7f3e45677790>), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.int64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 10, 'vec__ngram_range': (1, 4), 'vec__preprocessor': None, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7f3e45677790>, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', CountVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function tokenizer_ner_tag at 0x7f5248d855e0>)), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': CountVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function tokenizer_ner_tag at 0x7f5248d855e0>), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.int64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__preprocessor': None, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function tokenizer_ner_tag at 0x7f5248d855e0>, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', CountVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function tokenizer_pos_tag at 0x7fbd4427b790>)), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': CountVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function tokenizer_pos_tag at 0x7fbd4427b790>), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.int64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__preprocessor': None, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function tokenizer_pos_tag at 0x7fbd4427b790>, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=10, ngram_range=(1, 4),
                tokenizer=<function word_tokenize at 0x7f54f9b42790>)), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=10, ngram_range=(1, 4),
                tokenizer=<function word_tokenize at 0x7f54f9b42790>), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 10, 'vec__ngram_range': (1, 4), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7f54f9b42790>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', FeatureUnion(transformer_list=[('f1',
                                TfidfVectorizer(max_features=5000, min_df=5,
                                                ngram_range=(1, 3),
                                                tokenizer=<function word_tokenize at 0x7f0b49b4b700>)),
                               ('f2',
                                TfidfVectorizer(analyzer='char_wb',
                                                max_features=5000, min_df=5,
                                                ngram_range=(5, 5)))])), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': FeatureUnion(transformer_list=[('f1',
                                TfidfVectorizer(max_features=5000, min_df=5,
                                                ngram_range=(1, 3),
                                                tokenizer=<function word_tokenize at 0x7f0b49b4b700>)),
                               ('f2',
                                TfidfVectorizer(analyzer='char_wb',
                                                max_features=5000, min_df=5,
                                                ngram_range=(5, 5)))]), 'cls': LinearSVC(max_iter=1000000), 'vec__n_jobs': None, 'vec__transformer_list': [('f1', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f0b49b4b700>)), ('f2', TfidfVectorizer(analyzer='char_wb', max_features=5000, min_df=5,
                ngram_range=(5, 5)))], 'vec__transformer_weights': None, 'vec__verbose': False, 'vec__f1': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f0b49b4b700>), 'vec__f2': TfidfVectorizer(analyzer='char_wb', max_features=5000, min_df=5,
                ngram_range=(5, 5)), 'vec__f1__analyzer': 'word', 'vec__f1__binary': False, 'vec__f1__decode_error': 'strict', 'vec__f1__dtype': <class 'numpy.float64'>, 'vec__f1__encoding': 'utf-8', 'vec__f1__input': 'content', 'vec__f1__lowercase': True, 'vec__f1__max_df': 1.0, 'vec__f1__max_features': 5000, 'vec__f1__min_df': 5, 'vec__f1__ngram_range': (1, 3), 'vec__f1__norm': 'l2', 'vec__f1__preprocessor': None, 'vec__f1__smooth_idf': True, 'vec__f1__stop_words': None, 'vec__f1__strip_accents': None, 'vec__f1__sublinear_tf': False, 'vec__f1__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__f1__tokenizer': <function word_tokenize at 0x7f0b49b4b700>, 'vec__f1__use_idf': True, 'vec__f1__vocabulary': None, 'vec__f2__analyzer': 'char_wb', 'vec__f2__binary': False, 'vec__f2__decode_error': 'strict', 'vec__f2__dtype': <class 'numpy.float64'>, 'vec__f2__encoding': 'utf-8', 'vec__f2__input': 'content', 'vec__f2__lowercase': True, 'vec__f2__max_df': 1.0, 'vec__f2__max_features': 5000, 'vec__f2__min_df': 5, 'vec__f2__ngram_range': (5, 5), 'vec__f2__norm': 'l2', 'vec__f2__preprocessor': None, 'vec__f2__smooth_idf': True, 'vec__f2__stop_words': None, 'vec__f2__strip_accents': None, 'vec__f2__sublinear_tf': False, 'vec__f2__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__f2__tokenizer': None, 'vec__f2__use_idf': True, 'vec__f2__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', FeatureUnion(transformer_list=[('f1',
                                TfidfVectorizer(max_features=5000, min_df=5,
                                                ngram_range=(1, 3),
                                                tokenizer=<function word_tokenize at 0x7fce54d6f700>)),
                               ('f2',
                                TfidfVectorizer(max_features=5000, min_df=5,
                                                ngram_range=(1, 3),
                                                stop_words=['i', 'me', 'my',
                                                            'myself', 'we',
                                                            'our', 'ours',
                                                            'ourselves', 'you',
                                                            "you're", "you've",
                                                            "you'll", "you'd",
                                                            'your', 'yours',
                                                            'yourself',
                                                            'yourselves', 'he',
                                                            'him', 'his',
                                                            'himself', 'she',
                                                            "she's", 'her',
                                                            'hers', 'herself',
                                                            'it', "it's", 'its',
                                                            'itself', ...],
                                                tokenizer=<function word_tokenize at 0x7fce54d6f700>))])), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': FeatureUnion(transformer_list=[('f1',
                                TfidfVectorizer(max_features=5000, min_df=5,
                                                ngram_range=(1, 3),
                                                tokenizer=<function word_tokenize at 0x7fce54d6f700>)),
                               ('f2',
                                TfidfVectorizer(max_features=5000, min_df=5,
                                                ngram_range=(1, 3),
                                                stop_words=['i', 'me', 'my',
                                                            'myself', 'we',
                                                            'our', 'ours',
                                                            'ourselves', 'you',
                                                            "you're", "you've",
                                                            "you'll", "you'd",
                                                            'your', 'yours',
                                                            'yourself',
                                                            'yourselves', 'he',
                                                            'him', 'his',
                                                            'himself', 'she',
                                                            "she's", 'her',
                                                            'hers', 'herself',
                                                            'it', "it's", 'its',
                                                            'itself', ...],
                                                tokenizer=<function word_tokenize at 0x7fce54d6f700>))]), 'cls': LinearSVC(max_iter=1000000), 'vec__n_jobs': None, 'vec__transformer_list': [('f1', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7fce54d6f700>)), ('f2', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                stop_words=['i', 'me', 'my', 'myself', 'we', 'our', 'ours',
                            'ourselves', 'you', "you're", "you've", "you'll",
                            "you'd", 'your', 'yours', 'yourself', 'yourselves',
                            'he', 'him', 'his', 'himself', 'she', "she's",
                            'her', 'hers', 'herself', 'it', "it's", 'its',
                            'itself', ...],
                tokenizer=<function word_tokenize at 0x7fce54d6f700>))], 'vec__transformer_weights': None, 'vec__verbose': False, 'vec__f1': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7fce54d6f700>), 'vec__f2': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                stop_words=['i', 'me', 'my', 'myself', 'we', 'our', 'ours',
                            'ourselves', 'you', "you're", "you've", "you'll",
                            "you'd", 'your', 'yours', 'yourself', 'yourselves',
                            'he', 'him', 'his', 'himself', 'she', "she's",
                            'her', 'hers', 'herself', 'it', "it's", 'its',
                            'itself', ...],
                tokenizer=<function word_tokenize at 0x7fce54d6f700>), 'vec__f1__analyzer': 'word', 'vec__f1__binary': False, 'vec__f1__decode_error': 'strict', 'vec__f1__dtype': <class 'numpy.float64'>, 'vec__f1__encoding': 'utf-8', 'vec__f1__input': 'content', 'vec__f1__lowercase': True, 'vec__f1__max_df': 1.0, 'vec__f1__max_features': 5000, 'vec__f1__min_df': 5, 'vec__f1__ngram_range': (1, 3), 'vec__f1__norm': 'l2', 'vec__f1__preprocessor': None, 'vec__f1__smooth_idf': True, 'vec__f1__stop_words': None, 'vec__f1__strip_accents': None, 'vec__f1__sublinear_tf': False, 'vec__f1__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__f1__tokenizer': <function word_tokenize at 0x7fce54d6f700>, 'vec__f1__use_idf': True, 'vec__f1__vocabulary': None, 'vec__f2__analyzer': 'word', 'vec__f2__binary': False, 'vec__f2__decode_error': 'strict', 'vec__f2__dtype': <class 'numpy.float64'>, 'vec__f2__encoding': 'utf-8', 'vec__f2__input': 'content', 'vec__f2__lowercase': True, 'vec__f2__max_df': 1.0, 'vec__f2__max_features': 5000, 'vec__f2__min_df': 5, 'vec__f2__ngram_range': (1, 3), 'vec__f2__norm': 'l2', 'vec__f2__preprocessor': None, 'vec__f2__smooth_idf': True, 'vec__f2__stop_words': ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', "you're", "you've", "you'll", "you'd", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', "she's", 'her', 'hers', 'herself', 'it', "it's", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', "that'll", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', "don't", 'should', "should've", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', "aren't", 'couldn', "couldn't", 'didn', "didn't", 'doesn', "doesn't", 'hadn', "hadn't", 'hasn', "hasn't", 'haven', "haven't", 'isn', "isn't", 'ma', 'mightn', "mightn't", 'mustn', "mustn't", 'needn', "needn't", 'shan', "shan't", 'shouldn', "shouldn't", 'wasn', "wasn't", 'weren', "weren't", 'won', "won't", 'wouldn', "wouldn't"], 'vec__f2__strip_accents': None, 'vec__f2__sublinear_tf': False, 'vec__f2__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__f2__tokenizer': <function word_tokenize at 0x7fce54d6f700>, 'vec__f2__use_idf': True, 'vec__f2__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', FeatureUnion(transformer_list=[('f1',
                                TfidfVectorizer(max_features=5000, min_df=5,
                                                ngram_range=(1, 3),
                                                tokenizer=<function word_tokenize at 0x7f043651e700>)),
                               ('f2',
                                TfidfVectorizer(analyzer='char_wb',
                                                max_features=5000, min_df=5,
                                                ngram_range=(5, 5))),
                               ('f3',
                                TfidfVectorizer(max_features=5000, min_df=5,
                                                ngram_range=(1, 3),
                                                stop_words=['i', 'me', 'my',
                                                            'myself', 'we',
                                                            'our', 'ours',
                                                            'ourselves', 'you',
                                                            "you're", "you've",
                                                            "you'll", "you'd",
                                                            'your', 'yours',
                                                            'yourself',
                                                            'yourselves', 'he',
                                                            'him', 'his',
                                                            'himself', 'she',
                                                            "she's", 'her',
                                                            'hers', 'herself',
                                                            'it', "it's", 'its',
                                                            'itself', ...],
                                                tokenizer=<function word_tokenize at 0x7f043651e700>))])), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': FeatureUnion(transformer_list=[('f1',
                                TfidfVectorizer(max_features=5000, min_df=5,
                                                ngram_range=(1, 3),
                                                tokenizer=<function word_tokenize at 0x7f043651e700>)),
                               ('f2',
                                TfidfVectorizer(analyzer='char_wb',
                                                max_features=5000, min_df=5,
                                                ngram_range=(5, 5))),
                               ('f3',
                                TfidfVectorizer(max_features=5000, min_df=5,
                                                ngram_range=(1, 3),
                                                stop_words=['i', 'me', 'my',
                                                            'myself', 'we',
                                                            'our', 'ours',
                                                            'ourselves', 'you',
                                                            "you're", "you've",
                                                            "you'll", "you'd",
                                                            'your', 'yours',
                                                            'yourself',
                                                            'yourselves', 'he',
                                                            'him', 'his',
                                                            'himself', 'she',
                                                            "she's", 'her',
                                                            'hers', 'herself',
                                                            'it', "it's", 'its',
                                                            'itself', ...],
                                                tokenizer=<function word_tokenize at 0x7f043651e700>))]), 'cls': LinearSVC(max_iter=1000000), 'vec__n_jobs': None, 'vec__transformer_list': [('f1', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f043651e700>)), ('f2', TfidfVectorizer(analyzer='char_wb', max_features=5000, min_df=5,
                ngram_range=(5, 5))), ('f3', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                stop_words=['i', 'me', 'my', 'myself', 'we', 'our', 'ours',
                            'ourselves', 'you', "you're", "you've", "you'll",
                            "you'd", 'your', 'yours', 'yourself', 'yourselves',
                            'he', 'him', 'his', 'himself', 'she', "she's",
                            'her', 'hers', 'herself', 'it', "it's", 'its',
                            'itself', ...],
                tokenizer=<function word_tokenize at 0x7f043651e700>))], 'vec__transformer_weights': None, 'vec__verbose': False, 'vec__f1': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f043651e700>), 'vec__f2': TfidfVectorizer(analyzer='char_wb', max_features=5000, min_df=5,
                ngram_range=(5, 5)), 'vec__f3': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                stop_words=['i', 'me', 'my', 'myself', 'we', 'our', 'ours',
                            'ourselves', 'you', "you're", "you've", "you'll",
                            "you'd", 'your', 'yours', 'yourself', 'yourselves',
                            'he', 'him', 'his', 'himself', 'she', "she's",
                            'her', 'hers', 'herself', 'it', "it's", 'its',
                            'itself', ...],
                tokenizer=<function word_tokenize at 0x7f043651e700>), 'vec__f1__analyzer': 'word', 'vec__f1__binary': False, 'vec__f1__decode_error': 'strict', 'vec__f1__dtype': <class 'numpy.float64'>, 'vec__f1__encoding': 'utf-8', 'vec__f1__input': 'content', 'vec__f1__lowercase': True, 'vec__f1__max_df': 1.0, 'vec__f1__max_features': 5000, 'vec__f1__min_df': 5, 'vec__f1__ngram_range': (1, 3), 'vec__f1__norm': 'l2', 'vec__f1__preprocessor': None, 'vec__f1__smooth_idf': True, 'vec__f1__stop_words': None, 'vec__f1__strip_accents': None, 'vec__f1__sublinear_tf': False, 'vec__f1__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__f1__tokenizer': <function word_tokenize at 0x7f043651e700>, 'vec__f1__use_idf': True, 'vec__f1__vocabulary': None, 'vec__f2__analyzer': 'char_wb', 'vec__f2__binary': False, 'vec__f2__decode_error': 'strict', 'vec__f2__dtype': <class 'numpy.float64'>, 'vec__f2__encoding': 'utf-8', 'vec__f2__input': 'content', 'vec__f2__lowercase': True, 'vec__f2__max_df': 1.0, 'vec__f2__max_features': 5000, 'vec__f2__min_df': 5, 'vec__f2__ngram_range': (5, 5), 'vec__f2__norm': 'l2', 'vec__f2__preprocessor': None, 'vec__f2__smooth_idf': True, 'vec__f2__stop_words': None, 'vec__f2__strip_accents': None, 'vec__f2__sublinear_tf': False, 'vec__f2__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__f2__tokenizer': None, 'vec__f2__use_idf': True, 'vec__f2__vocabulary': None, 'vec__f3__analyzer': 'word', 'vec__f3__binary': False, 'vec__f3__decode_error': 'strict', 'vec__f3__dtype': <class 'numpy.float64'>, 'vec__f3__encoding': 'utf-8', 'vec__f3__input': 'content', 'vec__f3__lowercase': True, 'vec__f3__max_df': 1.0, 'vec__f3__max_features': 5000, 'vec__f3__min_df': 5, 'vec__f3__ngram_range': (1, 3), 'vec__f3__norm': 'l2', 'vec__f3__preprocessor': None, 'vec__f3__smooth_idf': True, 'vec__f3__stop_words': ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', "you're", "you've", "you'll", "you'd", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', "she's", 'her', 'hers', 'herself', 'it', "it's", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', "that'll", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', "don't", 'should', "should've", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', "aren't", 'couldn', "couldn't", 'didn', "didn't", 'doesn', "doesn't", 'hadn', "hadn't", 'hasn', "hasn't", 'haven', "haven't", 'isn', "isn't", 'ma', 'mightn', "mightn't", 'mustn', "mustn't", 'needn', "needn't", 'shan', "shan't", 'shouldn', "shouldn't", 'wasn', "wasn't", 'weren', "weren't", 'won', "won't", 'wouldn', "wouldn't"], 'vec__f3__strip_accents': None, 'vec__f3__sublinear_tf': False, 'vec__f3__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__f3__tokenizer': <function word_tokenize at 0x7f043651e700>, 'vec__f3__use_idf': True, 'vec__f3__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f02d3b20700>)), ('cls', LinearSVC(C=1e-05, max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f02d3b20700>), 'cls': LinearSVC(C=1e-05, max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7f02d3b20700>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 1e-05, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f02d3b20700>)), ('cls', LinearSVC(C=0.0001, max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f02d3b20700>), 'cls': LinearSVC(C=0.0001, max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7f02d3b20700>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 0.0001, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f02d3b20700>)), ('cls', LinearSVC(C=0.001, max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f02d3b20700>), 'cls': LinearSVC(C=0.001, max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7f02d3b20700>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 0.001, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f02d3b20700>)), ('cls', LinearSVC(C=0.01, max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f02d3b20700>), 'cls': LinearSVC(C=0.01, max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7f02d3b20700>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 0.01, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f02d3b20700>)), ('cls', LinearSVC(C=0.1, max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f02d3b20700>), 'cls': LinearSVC(C=0.1, max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7f02d3b20700>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 0.1, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f02d3b20700>)), ('cls', LinearSVC(C=1, max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f02d3b20700>), 'cls': LinearSVC(C=1, max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7f02d3b20700>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 1, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f02d3b20700>)), ('cls', LinearSVC(C=10, max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f02d3b20700>), 'cls': LinearSVC(C=10, max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7f02d3b20700>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 10, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f02d3b20700>)), ('cls', LinearSVC(C=100, max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f02d3b20700>), 'cls': LinearSVC(C=100, max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7f02d3b20700>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 100, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f02d3b20700>)), ('cls', LinearSVC(C=1000, max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7f02d3b20700>), 'cls': LinearSVC(C=1000, max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7f02d3b20700>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 1000, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=10, ngram_range=(2, 5),
                tokenizer=<function word_tokenize at 0x7f21510e5700>)), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=10, ngram_range=(2, 5),
                tokenizer=<function word_tokenize at 0x7f21510e5700>), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 10, 'vec__ngram_range': (2, 5), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7f21510e5700>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'C': 1.0, 'class_weight': None, 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': None, 'tol': 0.0001, 'verbose': 0}
INFO:root:{'C': 1.0, 'class_weight': None, 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': None, 'tol': 0.0001, 'verbose': 0}
INFO:root:{'C': 100, 'class_weight': None, 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': None, 'tol': 0.0001, 'verbose': 0}
INFO:root:{'C': 10000, 'class_weight': None, 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': None, 'tol': 0.0001, 'verbose': 0}
INFO:root:{'C': 10000, 'class_weight': None, 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': None, 'tol': 0.0001, 'verbose': 0}
INFO:root:{'C': 1000, 'class_weight': None, 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': None, 'tol': 0.0001, 'verbose': 0}
INFO:root:{'C': 100, 'class_weight': None, 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': None, 'tol': 0.0001, 'verbose': 0}
INFO:root:{'C': 10, 'class_weight': None, 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': None, 'tol': 0.0001, 'verbose': 0}
INFO:root:{'C': 10, 'class_weight': None, 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': None, 'tol': 0.0001, 'verbose': 0}
INFO:root:{'C': 10, 'class_weight': None, 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': None, 'tol': 0.0001, 'verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7fb3395c0670>)), ('cls', LinearSVC(C=1, max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7fb3395c0670>), 'cls': LinearSVC(C=1, max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7fb3395c0670>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 1, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7fb3395c0670>)), ('cls', LinearSVC(C=10, max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7fb3395c0670>), 'cls': LinearSVC(C=10, max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7fb3395c0670>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 10, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'C': 1000, 'class_weight': None, 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': None, 'tol': 0.0001, 'verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7fb3395c0670>)), ('cls', LinearSVC(C=100, max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7fb3395c0670>), 'cls': LinearSVC(C=100, max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7fb3395c0670>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 100, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7fb3395c0670>)), ('cls', LinearSVC(C=1000, max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7fb3395c0670>), 'cls': LinearSVC(C=1000, max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7fb3395c0670>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 1000, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'C': 1000, 'class_weight': None, 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': None, 'tol': 0.0001, 'verbose': 0}
INFO:root:{'C': 1000, 'class_weight': None, 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': None, 'tol': 0.0001, 'verbose': 0}
INFO:root:{'C': 1000, 'class_weight': None, 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': None, 'tol': 0.0001, 'verbose': 0}
INFO:root:{'C': 1000, 'class_weight': None, 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': None, 'tol': 0.0001, 'verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', CountVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7fcd0024c4c0>)), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': CountVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7fcd0024c4c0>), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.int64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__preprocessor': None, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7fcd0024c4c0>, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'memory': None, 'steps': [('vec', TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7fb302da11f0>)), ('cls', LinearSVC(max_iter=1000000))], 'verbose': False, 'vec': TfidfVectorizer(max_features=5000, min_df=5, ngram_range=(1, 3),
                tokenizer=<function word_tokenize at 0x7fb302da11f0>), 'cls': LinearSVC(max_iter=1000000), 'vec__analyzer': 'word', 'vec__binary': False, 'vec__decode_error': 'strict', 'vec__dtype': <class 'numpy.float64'>, 'vec__encoding': 'utf-8', 'vec__input': 'content', 'vec__lowercase': True, 'vec__max_df': 1.0, 'vec__max_features': 5000, 'vec__min_df': 5, 'vec__ngram_range': (1, 3), 'vec__norm': 'l2', 'vec__preprocessor': None, 'vec__smooth_idf': True, 'vec__stop_words': None, 'vec__strip_accents': None, 'vec__sublinear_tf': False, 'vec__token_pattern': '(?u)\\b\\w\\w+\\b', 'vec__tokenizer': <function word_tokenize at 0x7fb302da11f0>, 'vec__use_idf': True, 'vec__vocabulary': None, 'cls__C': 1.0, 'cls__class_weight': None, 'cls__dual': True, 'cls__fit_intercept': True, 'cls__intercept_scaling': 1, 'cls__loss': 'squared_hinge', 'cls__max_iter': 1000000, 'cls__multi_class': 'ovr', 'cls__penalty': 'l2', 'cls__random_state': None, 'cls__tol': 0.0001, 'cls__verbose': 0}
INFO:root:{'C': 1000, 'class_weight': None, 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': None, 'tol': 0.0001, 'verbose': 0}
INFO:root:{'C': 1000, 'class_weight': None, 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': None, 'tol': 0.0001, 'verbose': 0}
